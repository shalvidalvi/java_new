1. Create JDBC  based standalone java  application  for student management.

Table : create table students(id number(5) primary key,name varchar2(20),email varchar2 (20) unique ,address varchar2(10), phone_no varchar2(10),course_name varchar2(15),marks number(4,1));

Insert some student details & commit.

Create Student POJO & Student Dao & Tester for the following requirements.

1. Display All students by the specified course name
I/P -- course name
O/P List of students from the specified course (Use lambda expression or method reference for display)


2. Update Student details (update marks & phone number)
I/Ps accepted from user -- id , new marks & new phone number.
O/P --If student by specified id doesn't exist , throw custom exception (Student not found exception)
Otherwise  values should be updated in DB & give updations successful message.

3. Cancel Student admission.
I/P email
O/P --If student by specified email doesn't exist , throw custom exception (Student not found exception)
Otherwise  student record should be deleted from DB.


Create it  in bottoms up manner .
------------------------
2.

Create  java  application called EmpService(using suitable data structure) . This application must provide following functionalities.

1. Add Employee: id(unique), name, dob, hireDate, salary and department

2. View Employee: i/p id 
O/P emp details or error message via catch block

3. View Employees: Display all the employees in ascending order with respect to date of joining. 

4. Delete Employee: i/p  id
O/P emp details deleted message  or error message via catch block.

Non-Functional Requirements:
1. The application must use appropriate collection to save all the required information.
2. Application must throw appropriate exceptions whenever necessary.
3. Application must be created using appropriate layers.
--------------------------
1. Create JDBC  based standalone java  application  for stock exchange application.

DB.

Table : create table stocks(id number (5) primary key ,name varchar2(20),company varchar2(20) ,price number (6,1),quantity number(5),closing_date date);

Insert some records.

Create Stock POJO & Stock Dao & Tester for the following requirements.


1. Delete stock record from DB 
I/P -- company name
O/P Stocks Deleted successfully message or Invalid company name message

2. Add new stock 
I/P Stock details -- name,company , price ,quantity , closing date
O/P -- Stock record inserted successfully.

3. Update stock values
--------------------
4. Write a program to enroll student in a course. 
   StudentName:String,
   StudentId: Int (AutoIncrement),
   studentAge: Int,
   CourseList: List<String>
   constraints- User should be able to enroll a course if RegistrationDate is Greater than currentdate.
                duplicate entry is not allowed in course for user (Once per user per course)
                show course wise userlist.
 Persist student information in bin file using serialization & restore it with de-serialization

----------------------------
5. Write a program to read file of volunteer atleast 10.
   volunteer 
               volunteerId:int,
               vName:String,
               Hobbies:List<String>
               isAvailable:Boolean
               DOB:Date

  Rules : User Should Be able to Update the Information of Voulenteer
                While volunteer with having same name and same DOB is not allowed.
                DOB of volunteer should not less than 1-1-1980 while adding new record
                Show volunteer Who have Same Hobbies.
                Store Updated volunteer info in File.

File can be a text or binary file.
--------------------
6. 
Write a distributed application(TCP server client based) for the cell phone billing. Server should save upto last 6 months bills in the system , in a suitable collection.
Supply following options
1. Client sends his/her mobile number to TCP server.
TCP server has a suitable collection. Server sends back current month bill.
2. Client sends his/her mobile number to TCP server.
TCP server has a suitable collection. Server sends back bills for last 6 months
3. Client sends his/her name & birth date . Server sends back current month bill .
4. Admin user asks for the name of user with max bill in past 6 month, server sends it back.
               